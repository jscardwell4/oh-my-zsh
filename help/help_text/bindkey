bindkey [ options ] -l [ -L ] [ keymap ... ]
bindkey [ options ] -d
bindkey [ options ] -D keymap ...
bindkey [ options ] -A old-keymap new-keymap
bindkey [ options ] -N new-keymap [ old-keymap ]
bindkey [ options ] -m
bindkey [ options ] -r in-string ...
bindkey [ options ] -s in-string out-string ...
bindkey [ options ] in-string command ...
bindkey [ options ] [ in-string ]
       bindkey's options can be divided into three  categories:  keymap
       selection for the current command, operation selection, and oth-
       ers.  The keymap selection options are:

       -e     Selects keymap `emacs' for any operations by the  current
              command,  and  also links `emacs' to `main' so that it is
              selected by default the next time the editor starts.

       -v     Selects keymap `viins' for any operations by the  current
              command,  and  also links `viins' to `main' so that it is
              selected by default the next time the editor starts.

       -a     Selects keymap `vicmd' for any operations by the  current
              command.

       -M keymap
              The  keymap  specifies a keymap name that is selected for
              any operations by the current command.

       If a keymap selection is required and none of the options  above
       are  used,  the  `main'  keymap is used.  Some operations do not
       permit a keymap to be selected, namely:

       -l     List all existing keymap  names;  if  any  arguments  are
              given, list just those keymaps.

              If  the -L option is also used, list in the form of bind-
              key commands to create or link the keymaps.  `bindkey -lL
              main' shows which keymap is linked to `main', if any, and
              hence if the standard emacs or vi emulation is in effect.
              This  option  does  not  show the .safe keymap because it
              cannot be created in that fashion;  however,  neither  is
              `bindkey  -lL .safe' reported as an error, it simply out-
              puts nothing.

       -d     Delete all existing keymaps  and  reset  to  the  default
              state.

       -D keymap ...
              Delete the named keymaps.

       -A old-keymap new-keymap
              Make the new-keymap name an alias for old-keymap, so that
              both names refer to the  same  keymap.   The  names  have
              equal  standing; if either is deleted, the other remains.
              If there is already a keymap with the new-keymap name, it
              is deleted.

       -N new-keymap [ old-keymap ]
              Create  a  new  keymap,  named  new-keymap.   If a keymap
              already has that name, it is deleted.  If  an  old-keymap
              name  is  given,  the  new  keymap is initialized to be a
              duplicate of it, otherwise the new keymap will be  empty.

       To  use  a  newly  created  keymap, it should be linked to main.
       Hence the sequence of commands to create and use  a  new  keymap
       `mymap'   initialized  from  the  emacs  keymap  (which  remains
       unchanged) is:

              bindkey -N mymap emacs
              bindkey -A mymap main

       Note that while `bindkey -A newmap main' will work  when  newmap
       is emacs or viins, it will not work for vicmd, as switching from
       vi insert to command mode becomes impossible.

       The following operations act on the `main' keymap if  no  keymap
       selection option was given:

       -m     Add the built-in set of meta-key bindings to the selected
              keymap.   Only  keys  that  are  unbound  or   bound   to
              self-insert are affected.

       -r in-string ...
              Unbind  the  specified in-strings in the selected keymap.
              This is exactly equivalent  to  binding  the  strings  to
              undefined-key.

              When -R is also used, interpret the in-strings as ranges.

              When -p is also used, the  in-strings  specify  prefixes.
              Any binding that has the given in-string as a prefix, not
              including the binding for the in-string itself,  if  any,
              will be removed.  For example,

                     bindkey -rpM viins '^['

              will  remove  all bindings in the vi-insert keymap begin-
              ning with an escape character (probably cursor keys), but
              leave the binding for the escape character itself (proba-
              bly vi-cmd-mode).  This is incompatible with  the  option
              -R.

       -s in-string out-string ...
              Bind  each  in-string to each out-string.  When in-string
              is typed, out-string will be pushed back and  treated  as
              input  to  the line editor.  When -R is also used, inter-
              pret the in-strings as ranges.

       in-string command ...
              Bind each in-string to each command.  When  -R  is  used,
              interpret the in-strings as ranges.

       [ in-string ]
              List  key  bindings.   If  an in-string is specified, the
              binding of that string in the  selected  keymap  is  dis-
              played.   Otherwise,  all  key  bindings  in the selected
              keymap are displayed.  (As a special case, if the  -e  or
              -v  option  is  used alone, the keymap is not displayed -
              the implicit linking of keymaps is the  only  thing  that
              happens.)

              When  the  option  -p  is  used,  the  in-string  must be
              present.  The listing shows all bindings which  have  the
              given  key  sequence as a prefix, not including any bind-
              ings for the key sequence itself.

              When the -L option is used, the list is in  the  form  of
              bindkey commands to create the key bindings.

When  the  -R  option is used as noted above, a valid range consists of
two characters, with an optional  `-'  between  them.   All  characters
between the two specified, inclusive, are bound as specified.

For  either in-string or out-string, the following escape sequences are
recognised:

\a     bell character
\b     backspace
\e, \E escape
\f     form feed
\n     linefeed (newline)
\r     carriage return
\t     horizontal tab
\v     vertical tab
\NNN   character code in octal
\xNN   character code in hexadecimal
\M[-]X character with meta bit set
\C[-]X control character
^X     control character

In all other cases, `\' escapes the  following  character.   Delete  is
written  as  `^?'.   Note  that `\M^?' and `^\M?' are not the same, and
that (unlike emacs), the bindings `\M-X' and `\eX'  are  entirely  dis-
tinct,  although  they are initialized to the same bindings by `bindkey
-m'.
